openapi: 3.0.3
info:
  title: kapon - OpenAI 兼容 API
  version: 1.1.0
servers:
  - url: https://models.kapon.cloud
security:
  - bearerAuth: []
paths:
  /v1/chat/completions:
    post:
      summary: Chat Completions
      description: 与 OpenAI 兼容的对话生成接口，支持流式与工具调用。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            examples:
              basic:
                value:
                  model: gpt-4o-mini
                  messages:
                    - role: system
                      content: 你是一个有帮助的助手
                    - role: user
                      content: 用三句话介绍 kapon
                  stream: true
      responses:
        '200':
          description: 成功
  /v1/responses:
    post:
      summary: Responses
      description: OpenAI 新一代统一接口，支持多模态与 JSON mode。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsesRequest'
      responses:
        '200':
          description: 成功
  /v1/embeddings:
    post:
      summary: Embeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsRequest'
      responses:
        '200': { description: 成功 }
  /v1/audio/transcriptions:
    post:
      summary: Audio Transcriptions
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                model: { type: string, example: whisper-1 }
                file: { type: string, format: binary }
                response_format: { type: string, enum: [json, text, srt, vtt] }
      responses:
        '200': { description: 成功 }
  /v1/audio/translations:
    post:
      summary: Audio Translations
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                model: { type: string, example: whisper-1 }
                file: { type: string, format: binary }
                response_format: { type: string, enum: [json, text, srt, vtt] }
      responses:
        '200': { description: 成功 }
  /v1/audio/speech:
    post:
      summary: Audio Speech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string, example: gpt-4o-mini-tts }
                voice: { type: string, example: alloy }
                input: { type: string, example: 你好，欢迎使用 kapon！ }
      responses:
        '200': { description: 二进制音频流 }
  /v1/images/generations:
    post:
      summary: Image Generations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageGenerationRequest'
      responses:
        '200': { description: 成功 }
  /v1/images/edits:
    post:
      summary: Image Edits
      responses:
        '200': { description: 成功 }
  /v1/images/variations:
    post:
      summary: Image Variations
      responses:
        '200': { description: 成功 }
  /v1/models:
    get:
      summary: List Models
      responses:
        '200': { description: 成功 }
  /v1/videos:
    post:
      summary: Videos Create
      description: OpenAI Sora 统一视频创建接口，支持 JSON 与 multipart/form-data。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoCreateRequest'
      responses:
        '200': { description: 成功 }
  /v1/videos/{id}:
    get:
      summary: Video Retrieve
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: 成功 }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ChatMessage:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [system, user, assistant, tool]
        content:
          type: string
    ToolFunction:
      type: object
      required: [name]
      properties:
        name: { type: string }
        description: { type: string }
        parameters: { type: object, description: JSON Schema 对象 }
        strict: { type: boolean }
    Tool:
      type: object
      properties:
        type: { type: string, enum: [function] }
        function:
          $ref: '#/components/schemas/ToolFunction'
    ChatCompletionRequest:
      type: object
      required: [model, messages]
      properties:
        model: { type: string }
        messages:
          type: array
          items: { $ref: '#/components/schemas/ChatMessage' }
        tools:
          type: array
          items: { $ref: '#/components/schemas/Tool' }
        tool_choice: {}
        temperature: { type: number }
        top_p: { type: number }
        response_format: {}
        stream: { type: boolean }
    ResponsesRequest:
      type: object
      required: [model]
      properties:
        model: { type: string }
        input: {}
        text:
          type: object
          properties:
            format:
              type: object
              properties:
                type: { type: string, enum: [text, json_schema] }
                name: { type: string }
                description: { type: string }
                schema: {}
                strict: {}
        stream: { type: boolean }
    EmbeddingsRequest:
      type: object
      required: [model, input]
      properties:
        model: { type: string }
        input:
          oneOf:
            - type: string
            - type: array
              items: { type: string }
    ImageGenerationRequest:
      type: object
      required: [model, prompt]
      properties:
        model: { type: string, example: gpt-image-1 }
        prompt: { type: string }
        size: { type: string, example: 1024x1024 }
        n: { type: integer, example: 1 }
        response_format: { type: string, enum: [url, b64_json] }
    VideoCreateRequest:
      type: object
      required: [model, prompt]
      properties:
        model: { type: string, example: sora-2 }
        prompt: { type: string }
        seconds: { type: integer, example: 8 }
        size: { type: string, example: 1280x720 }
