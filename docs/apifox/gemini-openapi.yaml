openapi: 3.0.3
info:
  title: kapon - Gemini 渠道 API
  version: 1.1.0
servers:
  - url: https://models.kapon.cloud
security:
  - bearerAuth: []
paths:
  /gemini/v1beta/models/{model}:generateContent:
    post:
      summary: Gemini 文本/多模态生成
      parameters:
        - name: model
          in: path
          required: true
          schema: { type: string, example: gemini-1.5-pro }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeminiGenerateContentRequest'
      responses:
        '200': { description: 成功 }
  /gemini/v1beta/models/{model}:embedContent:
    post:
      summary: Gemini 文本向量
      parameters:
        - name: model
          in: path
          required: true
          schema: { type: string, example: text-embedding-004 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeminiEmbedContentRequest'
      responses:
        '200': { description: 成功 }
  /gemini/v1beta/models/{model}:predict:
    post:
      summary: Gemini 生图（Imagen）
      parameters:
        - name: model
          in: path
          required: true
          schema: { type: string, example: imagen-3.0-generate-001 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagenPredictRequest'
      responses:
        '200': { description: 成功 }
  /gemini/v1beta/models/{model}:predictLongRunning:
    post:
      summary: Gemini 生视频初始化（Veo）
      parameters:
        - name: model
          in: path
          required: true
          schema: { type: string, example: veo-2.0 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VeoPredictLongRunningRequest'
      responses:
        '200': { description: 成功（operation 对象） }
  /gemini/v1beta/operations/{name}:
    get:
      summary: Gemini 长任务查询
      parameters:
        - name: name
          in: path
          required: true
          schema: { type: string, example: operations/abc123 }
        - name: model
          in: query
          required: false
          schema: { type: string, example: gemini-2.5-pro }
      responses:
        '200': { description: 成功 }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GeminiPart:
      type: object
      properties:
        text: { type: string }
        inline_data:
          type: object
          properties:
            mime_type: { type: string }
            data: { type: string, description: Base64 }
    GeminiContent:
      type: object
      properties:
        role: { type: string, example: user }
        parts:
          type: array
          items: { $ref: '#/components/schemas/GeminiPart' }
    GeminiGenerateContentRequest:
      type: object
      properties:
        contents:
          type: array
          items: { $ref: '#/components/schemas/GeminiContent' }
        generationConfig:
          type: object
          properties:
            temperature: { type: number }
            topP: { type: number }
            maxOutputTokens: { type: integer }
            responseModalities:
              type: array
              items: { type: string }
    GeminiEmbedContentRequest:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/GeminiContent'
    ImagenPredictRequest:
      type: object
      properties:
        instances:
          type: array
          items:
            type: object
            properties:
              prompt: { type: string }
        parameters:
          type: object
          properties:
            aspectRatio: { type: string, enum: ["1:1","16:9","9:16"] }
            sampleCount: { type: integer }
    VeoPredictLongRunningRequest:
      type: object
      properties:
        input:
          type: object
          properties:
            prompt: { type: string }
        config:
          type: object
          properties:
            durationSeconds: { type: integer }
            aspectRatio: { type: string, enum: ["16:9","9:16","1:1"] }
